{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Import python packages\
import streamlit as st\
import pandas as pd\
from snowflake.snowpark.context import get_active_session\
from snowflake.snowpark.functions import array_agg\
\
# Get the current credentials\
session = get_active_session()\
\
# access underlying snowflake tables\
# let participants define this?-----------\
purchases_df = session.table("customer_purchases")\
products_df = session.table("products")\
categories_df = session.table("product_category")\
customer_demographics_df = session.table("customer_demographics").to_pandas()\
median_age_df = session.table("median_age").to_pandas()\
customer_demographics_census_df = customer_demographics_df.merge(median_age_df, how='inner', on='CITY')\
customer_demographics_census_df['CUSTOMER_ID'] = customer_demographics_census_df['CUSTOMER_ID'].astype(int)\
\
# join all tables together\
# let participants define this?-----------\
purchases_products_categories_df = purchases_df.join(products_df,purchases_df["product_id"] == products_df["product_id"]).join(categories_df, purchases_df["product_id"] == categories_df["product_id"])\
\
# aggregate products by customer\
# let participants define this?-----------\
purchases_products_df = purchases_products_categories_df.select("CUSTOMER_ID","PRODUCT_NAME").group_by("CUSTOMER_ID").agg(array_agg("PRODUCT_NAME").alias("product_array")).to_pandas()\
\
# aggregate product categories by customer\
# let participants define this?-----------\
purchases_categories_df = purchases_products_categories_df.select("CUSTOMER_ID","PRODUCT_CATEGORY").drop_duplicates().group_by("CUSTOMER_ID").agg(array_agg("PRODUCT_CATEGORY").alias("category_array")).to_pandas()\
\
# Add some cosmetic headers\
st.title("OpenAI Shopper")\
st.caption("Using Azure OpenAI with Snowflake to generate customer messages.")\
\
default_prompt = 'Review the customers most frequent retail purchases from last year. Write a personalized email explaining their shopper profile based on these habits. Add a tailored message suggesting products and brands for them to consider, from their purchase history. recommend specific items.'\
\
with st.expander("Adjust system prompt"):\
    system = st.text_area("System instructions", value=default_prompt).replace("'","")\
st.markdown('------') \
\
# widget for customer filter\
option = st.selectbox(\
    'Select a Customer ID',\
     purchases_products_df['CUSTOMER_ID'])\
\
# filter down to relevant products and categories\
# let participants define this?-----------\
filtered_products_df = purchases_products_df.loc[purchases_products_df['CUSTOMER_ID'] == option]['PRODUCT_ARRAY'].iloc[0]\
filtered_categories_df = purchases_categories_df.loc[purchases_categories_df['CUSTOMER_ID'] == option]['CATEGORY_ARRAY'].iloc[0]\
filtered_dem= customer_demographics_census_df.loc[customer_demographics_census_df['CUSTOMER_ID'] == option]\
\
# display products and categories and City and /median age\
st.subheader("Products Purchased")\
filtered_products_df\
st.subheader("Categories Purchased")\
filtered_categories_df\
st.subheader("Customer Demographics")\
filtered_dem\
\
\
user_context = f"Products purchased: \{filtered_products_df\}, Product Categories: \{filtered_categories_df\}"\
\
# Use the job description to write the job to a table and run the function against it:\
if(st.button('Ask ChatGPT')):\
    result = session.sql(f"""SELECT chatgpt('\{system\}','\{user_context\}')""").collect()\
    st.header('Answer')\
    st.write(result[0][0].replace('"','')) }
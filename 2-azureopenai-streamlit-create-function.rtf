{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww29740\viewh18600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 use role ACCOUNTADMIN;\
use database CUSTOMER_WRAPPED;\
use warehouse task_wh;\
\
CREATE OR REPLACE NETWORK RULE CHATGPT_NETWORK_RULE\
    MODE = EGRESS\
    TYPE = HOST_PORT\
    VALUE_LIST = ('<openai url>');\
\
CREATE OR REPLACE SECRET CHATGPT_API_KEY\
    TYPE = GENERIC_STRING\
    SECRET_STRING='<openai token>';      \
\
CREATE OR REPLACE EXTERNAL ACCESS INTEGRATION OPENAI_INTEGRATION\
    ALLOWED_NETWORK_RULES = (CHATGPT_NETWORK_RULE)\
    ALLOWED_AUTHENTICATION_SECRETS = (CHATGPT_API_KEY)\
    ENABLED=TRUE;\
\
CREATE OR REPLACE FUNCTION CHATGPT(instructions STRING, user_context STRING)\
returns string\
language python\
runtime_version=3.8\
handler = 'ask_chatGPT'\
external_access_integrations=(OPENAI_INTEGRATION)\
packages = ('openai')\
SECRETS = ('cred' = chatgpt_api_key )\
as\
$$\
import _snowflake\
from openai import OpenAI\
client = OpenAI(\
    api_key=_snowflake.get_generic_secret_string("cred") )\
def ask_chatGPT(instructions, user_context):\
    response = client.chat.completions.create(\
    model="gpt-3.5-turbo",\
    messages=[\{"role": "system", "content": f"<SYSTEM>Follow these:\{instructions\}<END_SYSTEM>\\n<USER_CONTEXT>Use this user context in your response:\{user_context\}<END_USER_CONTEXT>"\}])\
    return response.choices[0].message.content\
$$;\
\
\
\
}